{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI/src/views/Client/ClientDashboard/ClientDashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\nimport { Grid } from \"@material-ui/core\";\nimport { drawRect } from \"./utilities\";\n\nconst ClientDashboard = () => {\n  _s();\n\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null); // Main function\n\n  const runCoco = async () => {\n    const net = await tf.loadGraphModel(\"https://signlanguage-tensorflow.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\"); //  Loop and detect hands\n\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async net => {\n    // Check data is available\n    // if (\n    //   typeof webcamRef.current !== \"undefined\" &&\n    //   webcamRef.current !== null &&\n    //   webcamRef.current.video.readyState === 4\n    // ) {\n    // Get Video Properties\n    const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight; // Set video width\n\n    webcamRef.current.video.width = videoWidth;\n    webcamRef.current.video.height = videoHeight; // Set canvas height and width\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight; // 4. TODO - Make Detections\n\n    const img = tf.browser.fromPixels(video);\n    const resized = tf.image.resizeBilinear(img, [640, 480]);\n    const casted = resized.cast(\"int32\");\n    const expanded = casted.expandDims(0);\n    const obj = await net.executeAsync(expanded);\n    console.log(obj);\n    const boxes = await obj[1].array();\n    const classes = await obj[2].array();\n    const scores = await obj[4].array(); // Draw mesh\n\n    const ctx = canvasRef.current.getContext(\"2d\"); // 5. TODO - Update drawing utility\n    // drawSomething(obj, ctx)\n\n    requestAnimationFrame(() => {\n      drawRect(boxes[0], classes[0], scores[0], 0.8, videoWidth, videoHeight, ctx);\n    });\n    tf.dispose(img);\n    tf.dispose(resized);\n    tf.dispose(casted);\n    tf.dispose(expanded);\n    tf.dispose(obj);\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      ref: webcamRef,\n      muted: true,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 0,\n        textAlign: \"center\",\n        zindex: 9,\n        width: 800,\n        height: 1000\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        position: \"absolute\",\n        marginLeft: \"auto\",\n        marginRight: \"auto\",\n        left: 0,\n        right: 0,\n        textAlign: \"center\",\n        zindex: 8,\n        width: 640,\n        height: 480\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClientDashboard, \"v4cpjlVQ0JCDZnPWaD3Z9DHNiTM=\");\n\n_c = ClientDashboard;\nexport default ClientDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientDashboard\");","map":{"version":3,"sources":["/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI/src/views/Client/ClientDashboard/ClientDashboard.js"],"names":["React","useRef","useEffect","tf","Webcam","Grid","drawRect","ClientDashboard","webcamRef","canvasRef","runCoco","net","loadGraphModel","setInterval","detect","video","current","videoWidth","videoHeight","width","height","img","browser","fromPixels","resized","image","resizeBilinear","casted","cast","expanded","expandDims","obj","executeAsync","console","log","boxes","array","classes","scores","ctx","getContext","requestAnimationFrame","dispose","position","marginLeft","marginRight","left","right","textAlign","zindex"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport Webcam from \"react-webcam\";\n\nimport { Grid } from \"@material-ui/core\";\n\nimport { drawRect } from \"./utilities\";\n\nconst ClientDashboard = () => {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n  // Main function\n  const runCoco = async () => {\n    const net = await tf.loadGraphModel(\n      \"https://signlanguage-tensorflow.s3.jp-tok.cloud-object-storage.appdomain.cloud/model.json\"\n    );\n\n    //  Loop and detect hands\n    setInterval(() => {\n      detect(net);\n    }, 16.7);\n  };\n\n  const detect = async (net) => {\n    // Check data is available\n    // if (\n    //   typeof webcamRef.current !== \"undefined\" &&\n    //   webcamRef.current !== null &&\n    //   webcamRef.current.video.readyState === 4\n    // ) {\n    // Get Video Properties\n    const video = webcamRef.current.video;\n    const videoWidth = webcamRef.current.video.videoWidth;\n    const videoHeight = webcamRef.current.video.videoHeight;\n\n    // Set video width\n    webcamRef.current.video.width = videoWidth;\n    webcamRef.current.video.height = videoHeight;\n\n    // Set canvas height and width\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    // 4. TODO - Make Detections\n    const img = tf.browser.fromPixels(video);\n    const resized = tf.image.resizeBilinear(img, [640, 480]);\n    const casted = resized.cast(\"int32\");\n    const expanded = casted.expandDims(0);\n    const obj = await net.executeAsync(expanded);\n    console.log(obj);\n\n    const boxes = await obj[1].array();\n    const classes = await obj[2].array();\n    const scores = await obj[4].array();\n\n    // Draw mesh\n    const ctx = canvasRef.current.getContext(\"2d\");\n\n    // 5. TODO - Update drawing utility\n    // drawSomething(obj, ctx)\n    requestAnimationFrame(() => {\n      drawRect(\n        boxes[0],\n        classes[0],\n        scores[0],\n        0.8,\n        videoWidth,\n        videoHeight,\n        ctx\n      );\n    });\n\n    tf.dispose(img);\n    tf.dispose(resized);\n    tf.dispose(casted);\n    tf.dispose(expanded);\n    tf.dispose(obj);\n  };\n\n  useEffect(() => {\n    runCoco();\n  }, []);\n\n  return (\n    <Grid container spacing={3}>\n      <Webcam\n        ref={webcamRef}\n        muted={true}\n        style={{\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 9,\n          width: 800,\n          height: 1000,\n        }}\n      />\n\n      <canvas\n        ref={canvasRef}\n        style={{\n          position: \"absolute\",\n          marginLeft: \"auto\",\n          marginRight: \"auto\",\n          left: 0,\n          right: 0,\n          textAlign: \"center\",\n          zindex: 8,\n          width: 640,\n          height: 480,\n        }}\n      />\n    </Grid>\n  );\n};\n\nexport default ClientDashboard;\n"]},"metadata":{},"sourceType":"module"}