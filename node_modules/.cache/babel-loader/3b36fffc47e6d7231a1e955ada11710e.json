{"ast":null,"code":"import _slicedToArray from\"/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Define our labelmap\nvar labelMap={1:{name:\"zero\",color:\"red\"},2:{name:\"one\",color:\"yellow\"},3:{name:\"two\",color:\"lime\"},4:{name:\"three\",color:\"blue\"},5:{name:\"four\",color:\"purple\"},6:{name:\"five\",color:\"black\"},7:{name:\"six\",color:\"pink\"},8:{name:\"seven\",color:\"gray\"},9:{name:\"eight\",color:\"purple\"},10:{name:\"nine\",color:\"purple\"},11:{name:\"ten\",color:\"purple\"}};// Define a drawing function\nexport var drawRect=function drawRect(boxes,classes,scores,threshold,imgWidth,imgHeight,ctx){for(var i=0;i<=boxes.length;i++){if(boxes[i]&&classes[i]&&scores[i]>threshold){// Extract variables\nvar _boxes$i=_slicedToArray(boxes[i],4),y=_boxes$i[0],x=_boxes$i[1],height=_boxes$i[2],width=_boxes$i[3];var text=classes[i];ctx.strokeStyle=labelMap[text][\"color\"];ctx.lineWidth=10;ctx.fillStyle=\"white\";ctx.font=\"30px Arial\";ctx.beginPath();ctx.fillText(labelMap[text][\"name\"]+\" - \"+Math.round(scores[i]*100)/100,x*imgWidth,y*imgHeight-10);ctx.rect(x*imgWidth,y*imgHeight,width*imgWidth/2,height*imgHeight/1.5);ctx.stroke();}}};","map":{"version":3,"sources":["/Users/manmanbbg/Desktop/degree/FYP/project/FYP_UI/src/views/Client/ClientDashboard/utilities.js"],"names":["labelMap","name","color","drawRect","boxes","classes","scores","threshold","imgWidth","imgHeight","ctx","i","length","y","x","height","width","text","strokeStyle","lineWidth","fillStyle","font","beginPath","fillText","Math","round","rect","stroke"],"mappings":"yKAAA;AACA,GAAMA,CAAAA,QAAQ,CAAG,CACf,EAAG,CAAEC,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAE,KAAvB,CADY,CAEf,EAAG,CAAED,IAAI,CAAE,KAAR,CAAeC,KAAK,CAAE,QAAtB,CAFY,CAGf,EAAG,CAAED,IAAI,CAAE,KAAR,CAAeC,KAAK,CAAE,MAAtB,CAHY,CAIf,EAAG,CAAED,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAE,MAAxB,CAJY,CAKf,EAAG,CAAED,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAE,QAAvB,CALY,CAMf,EAAG,CAAED,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAE,OAAvB,CANY,CAOf,EAAG,CAAED,IAAI,CAAE,KAAR,CAAeC,KAAK,CAAE,MAAtB,CAPY,CAQf,EAAG,CAAED,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAE,MAAxB,CARY,CASf,EAAG,CAAED,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAE,QAAxB,CATY,CAUf,GAAI,CAAED,IAAI,CAAE,MAAR,CAAgBC,KAAK,CAAE,QAAvB,CAVW,CAWf,GAAI,CAAED,IAAI,CAAE,KAAR,CAAeC,KAAK,CAAE,QAAtB,CAXW,CAAjB,CAcA;AACA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CACtBC,KADsB,CAEtBC,OAFsB,CAGtBC,MAHsB,CAItBC,SAJsB,CAKtBC,QALsB,CAMtBC,SANsB,CAOtBC,GAPsB,CAQnB,CACH,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAIP,KAAK,CAACQ,MAA3B,CAAmCD,CAAC,EAApC,CAAwC,CACtC,GAAIP,KAAK,CAACO,CAAD,CAAL,EAAYN,OAAO,CAACM,CAAD,CAAnB,EAA0BL,MAAM,CAACK,CAAD,CAAN,CAAYJ,SAA1C,CAAqD,CACnD;AADmD,4BAErBH,KAAK,CAACO,CAAD,CAFgB,IAE5CE,CAF4C,aAEzCC,CAFyC,aAEtCC,MAFsC,aAE9BC,KAF8B,aAGnD,GAAMC,CAAAA,IAAI,CAAGZ,OAAO,CAACM,CAAD,CAApB,CAEAD,GAAG,CAACQ,WAAJ,CAAkBlB,QAAQ,CAACiB,IAAD,CAAR,CAAe,OAAf,CAAlB,CACAP,GAAG,CAACS,SAAJ,CAAgB,EAAhB,CACAT,GAAG,CAACU,SAAJ,CAAgB,OAAhB,CACAV,GAAG,CAACW,IAAJ,CAAW,YAAX,CAEAX,GAAG,CAACY,SAAJ,GACAZ,GAAG,CAACa,QAAJ,CACEvB,QAAQ,CAACiB,IAAD,CAAR,CAAe,MAAf,EAAyB,KAAzB,CAAiCO,IAAI,CAACC,KAAL,CAAWnB,MAAM,CAACK,CAAD,CAAN,CAAY,GAAvB,EAA8B,GADjE,CAEEG,CAAC,CAAGN,QAFN,CAGEK,CAAC,CAAGJ,SAAJ,CAAgB,EAHlB,EAKAC,GAAG,CAACgB,IAAJ,CACEZ,CAAC,CAAGN,QADN,CAEEK,CAAC,CAAGJ,SAFN,CAGGO,KAAK,CAAGR,QAAT,CAAqB,CAHvB,CAIGO,MAAM,CAAGN,SAAV,CAAuB,GAJzB,EAMAC,GAAG,CAACiB,MAAJ,GACD,CACF,CACF,CAnCM","sourcesContent":["// Define our labelmap\nconst labelMap = {\n  1: { name: \"zero\", color: \"red\" },\n  2: { name: \"one\", color: \"yellow\" },\n  3: { name: \"two\", color: \"lime\" },\n  4: { name: \"three\", color: \"blue\" },\n  5: { name: \"four\", color: \"purple\" },\n  6: { name: \"five\", color: \"black\" },\n  7: { name: \"six\", color: \"pink\" },\n  8: { name: \"seven\", color: \"gray\" },\n  9: { name: \"eight\", color: \"purple\" },\n  10: { name: \"nine\", color: \"purple\" },\n  11: { name: \"ten\", color: \"purple\" },\n};\n\n// Define a drawing function\nexport const drawRect = (\n  boxes,\n  classes,\n  scores,\n  threshold,\n  imgWidth,\n  imgHeight,\n  ctx\n) => {\n  for (let i = 0; i <= boxes.length; i++) {\n    if (boxes[i] && classes[i] && scores[i] > threshold) {\n      // Extract variables\n      const [y, x, height, width] = boxes[i];\n      const text = classes[i];\n\n      ctx.strokeStyle = labelMap[text][\"color\"];\n      ctx.lineWidth = 10;\n      ctx.fillStyle = \"white\";\n      ctx.font = \"30px Arial\";\n\n      ctx.beginPath();\n      ctx.fillText(\n        labelMap[text][\"name\"] + \" - \" + Math.round(scores[i] * 100) / 100,\n        x * imgWidth,\n        y * imgHeight - 10\n      );\n      ctx.rect(\n        x * imgWidth,\n        y * imgHeight,\n        (width * imgWidth) / 2,\n        (height * imgHeight) / 1.5\n      );\n      ctx.stroke();\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}